const path = require('path');
const glob = require('glob');
const PurgecssPlugin = require('purgecss-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');

const PATHS = {
    views: path.resolve(__dirname, './'),
};

function resolve (dir) {
    return path.join(__dirname, '.', dir)
}

module.exports = {
   entry: './index.js',
   output: {
       path: path.join(__dirname, 'output', '[hash]'),
       publicPath: './',
       filename: './js/bundle.min.js'
   },
   plugins: [
       new CleanWebpackPlugin(),
       new PurgecssPlugin({
            whitelist: function () {
                return [];
            },
            whitelistPatterns: function () {
                return [];
            },
            whitelistPatternsChildren: function () {
                return [];
            },
            paths: glob.sync(`${PATHS.views}/**/*`, {nodir: true}),
        }),
        new HtmlWebpackPlugin({
            template: resolve(__dirname, 'src/public', 'index.html'),
            filename: './index.html',
            minify: {
                collapseBooleanAttributes: true,
                collapseWhitespace: true,
                removeAttributeQuotes: true,
                removeComments: true,
                removeEmptyAttributes: true,
                removeRedundantAttributes: true,
                removeScriptTypeAttributes: true,
                removeStyleLinkTypeAttributes: true,
                minifyCSS: true,
                minifyJS: true,
                sortAttributes: true,
                useShortDoctype: true
            },
            inject: false
        })
   ],
   module: {
       rules: [
           {
               test: /\.js$/,
               use: {
               loader: 'babel-loader',
               options: {
                       presets: ['@babel/preset-env']
                   }
               }
           },
           {
            test: /\.(sa|sc|c)ss$/,
                use: [
                    {
                        loader: MiniCssExtractPlugin.loader
                    },
                    'css-loader',
                    {
                        loader: 'postcss-loader',
                        options: {
                            plugins: function () {
                                return [
                                    require('autoprefixer'),
                                    require('cssnano')({preset: ['default', {discardComments: {removeAll: true}}]})
                                ];
                            }
                        }
                    },
                    'sass-loader'
                ]
           },
           {
                test: /\.(eot|woff|woff2|[ot]tf)$/,
                use: {
                    loader: 'file-loader',
                    options: {
                        name: '[name].[ext]',
                        outputPath: './fonts/',
                        publicPath: '/fonts/'
                    }
                }
            },
            {
                test: /.*font.*\.svg$/,
                use: {
                    loader: 'file-loader',
                    options: {
                        name: '[name].[ext]',
                        outputPath: './fonts/',
                        publicPath: '/fonts/'
                    }
                }
            },
            {
                test: /^(?!.*font).*\.svg$/,
                use: {
                    loader: 'file-loader',
                    options: {
                        name: '[name].[ext]',
                        outputPath: './images/',
                        publicPath: '/images/'
                    }
                }
            },
            {
                test: /\.(jpe?g|png|gif|webp)$/,
                use: {
                    loader: 'file-loader',
                    options: {
                        name: '[name].[ext]',
                        outputPath: './images/',
                        publicPath: '/images/'
                    }
                }
            }
       ]
   },
   optimization: {
       minimizer: [
           new TerserPlugin({
           cache: true,
           parallel: true,
           terserOptions: {
               output: {
                   comments: false,
                   }
               }
           })
      ]
   }
};
